/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DutchAuctionsInterface extends ethers.utils.Interface {
  functions: {
    "bid(uint256)": FunctionFragment;
    "erc20TokenAddress()": FunctionFragment;
    "erc721TokenAddress()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getAddressOfOwner()": FunctionFragment;
    "getNumBlocksOpen()": FunctionFragment;
    "getOfferPriceDecrement()": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getReservePrice()": FunctionFragment;
    "getWinnerAddress()": FunctionFragment;
    "nftTokenId()": FunctionFragment;
    "nop()": FunctionFragment;
    "refund(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "erc20TokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddressOfOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumBlocksOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferPriceDecrement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumBlocksOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferPriceDecrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;

  events: {};
}

export class DutchAuctions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchAuctionsInterface;

  functions: {
    bid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<[string]>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressOfOwner(overrides?: CallOverrides): Promise<[string]>;

    getNumBlocksOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWinnerAddress(overrides?: CallOverrides): Promise<[string]>;

    nftTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      refundAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20TokenAddress(overrides?: CallOverrides): Promise<string>;

  erc721TokenAddress(overrides?: CallOverrides): Promise<string>;

  finalize(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressOfOwner(overrides?: CallOverrides): Promise<string>;

  getNumBlocksOpen(overrides?: CallOverrides): Promise<BigNumber>;

  getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getWinnerAddress(overrides?: CallOverrides): Promise<string>;

  nftTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  nop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    refundAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<string>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getAddressOfOwner(overrides?: CallOverrides): Promise<string>;

    getNumBlocksOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getWinnerAddress(overrides?: CallOverrides): Promise<string>;

    nftTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nop(overrides?: CallOverrides): Promise<boolean>;

    refund(
      refundAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressOfOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getNumBlocksOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getWinnerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      refundAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721TokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressOfOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumBlocksOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOfferPriceDecrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      refundAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
